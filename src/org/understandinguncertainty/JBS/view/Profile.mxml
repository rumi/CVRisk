<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 addedToStage="setup()"
		 implements="org.understandinguncertainty.JBS.IProfile"
		 xmlns:validators="org.understandinguncertainty.JBS.validators.*" xmlns:ns="library://ns.adobe.com/flex/mx">
	

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.resources.IResourceManager;
			
			import org.understandinguncertainty.JBS.IProfile;
			import org.understandinguncertainty.JBS.model.RunModel;
			import org.understandinguncertainty.JBS.signals.ModelChoiceChanged;
			import org.understandinguncertainty.JBS.signals.ProfileCommitSignal;
			import org.understandinguncertainty.JBS.signals.ProfileLoadSignal;
			import org.understandinguncertainty.JBS.signals.ProfileSaveSignal;
			import org.understandinguncertainty.JBS.signals.ProfileValidSignal;
			
			[Inject]
			public var profileValidSignal:ProfileValidSignal;
			
			[Inject]
			public var profileSaveSignal:ProfileSaveSignal;
			
			[Inject]
			public var profileLoadSignal:ProfileLoadSignal;
			
			[Inject]
			public var profileCommitSignal:ProfileCommitSignal;
			
			[Inject]
			public var runModel:RunModel;
			
			[Inject]
			public var modelChoiceChanged:ModelChoiceChanged;
						
			[Inject]
			public var resources:IResourceManager;


			private function setup():void {
				validate();
				//mmol_L = resources.getString("JBS","units.mmol_L");
				//mg_dL = resources.getString("JBS","units.mg_dL");
				cholUnitFactors = new ArrayCollection([
					{unit:mmol_L, factor: 1},
					{unit:mg_dL, factor: 1 / cholConversionFactor},
				]);
				totalCholUnits.selectedIndex = 0;
				hdlCholUnits.selectedIndex = 0;
				runModel.mmol = (cholesterolUnit == mmol_L);
								
			}
					
			public function resized():void
			{
				parentDocument.invalidateSize();
			}
			
			public function validate():void {
				// we don't want lazy validation here!
				var e1:Boolean = (hdlCholValidator.validate().results != null);
				var e2:Boolean = (totalCholValidator.validate().results != null);
				var e3:Boolean = (dateValidator.validate().results != null)
				var e4:Boolean = (sbpValidator.validate().results != null);
				if(e1 || e2 || e3 || e4 ) {
					isValid = false;
					profileValidSignal.dispatch(false);
				}
				else {
					isValid = true;
					profileValidSignal.dispatch(true);
				}
			}
			
			public var _isValid:Boolean = false;
			
			[Bindable]
			public function get isValid():Boolean
			{
				return _isValid;
			}
			public function set isValid(b:Boolean):void
			{
				_isValid = b;
			}
			
			
			private function currentYear():int 
			{
				var d:Date = new Date();
				return d.fullYear;
			}
			
			
			private const cholConversionFactor:Number = 38.7;
			private var mmol_L:String = "mmol/L";
			private var mg_dL:String = "mg/dL";
			
			public function get cholesterolUnit():String
			{
				if(totalCholUnits.selectedIndex < 0) {
					totalCholUnits.selectedIndex = 0;
					hdlCholUnits.selectedIndex = 0;
				}
				return totalCholUnits.selectedItem.unit;
			}
			
			[Bindable]
			private var cholesterolFactor:Number = 1;
			
			public function get totalCholesterol():Number
			{
				return Number(totalCholesterolInput.text);
			}
			public function set totalCholesterol(value:Number):void
			{
				totalCholesterolInput.text = value.toPrecision(3);
				updateCholesterolRatio();
			}
			
			[Bindable]
			public function get hdlCholesterol():Number
			{
				return Number(hdlCholesterolInput.text);
			}
			public function set hdlCholesterol(value:Number):void
			{
				hdlCholesterolInput.text = value.toPrecision(3);
				updateCholesterolRatio();
			}
			
			public function get totalCholesterol_mmol_L():Number
			{
				if(cholesterolUnit == mmol_L)
					return totalCholesterol;
				else
					return totalCholesterol / cholConversionFactor;
			}
			public function set totalCholesterol_mmol_L(value:Number):void
			{
				if(cholesterolUnit == mmol_L)
					totalCholesterol = value;
				else
					totalCholesterol = value * cholConversionFactor;
				
			}
			
			public function get hdlCholesterol_mmol_L():Number
			{
				if(cholesterolUnit == mmol_L)
					return hdlCholesterol;
				else
					return hdlCholesterol / cholConversionFactor;
			}
			public function set hdlCholesterol_mmol_L(value:Number):void
			{
				if(cholesterolUnit == mmol_L)
					hdlCholesterol = value;
				else
					hdlCholesterol = value * cholConversionFactor;
			}
			
			
			[Bindable]
			private var cholesterolRatio:Number = 1;
			
			private function updateCholesterolRatio():void
			{
				cholesterolRatio = totalCholesterol / hdlCholesterol;
			}
			
			[Bindable]
			private var cholUnitFactors:ArrayCollection = new ArrayCollection([
				{unit:"mmol/L", factor: 1},
				{unit:"mg/dL", factor: 1 / cholConversionFactor},
				]);
			
			private function changedUnits(event:Event):void
			{
				if(event.currentTarget == totalCholUnits) {
					hdlCholUnits.selectedIndex = totalCholUnits.selectedIndex;
				}
				else {
					totalCholUnits.selectedIndex = hdlCholUnits.selectedIndex;					
				}
				cholesterolFactor = (cholesterolUnit == mmol_L) ? 1 : cholConversionFactor;
				runModel.mmol = (cholesterolUnit == mmol_L);
				validate();
			}
			
			[Bindable]
			public var metres:Number = 1.75;
			
			[Bindable]
			public var kg:Number = 1.75;
			
			[Bindable]
			public var bmi:Number = 1;
			
			[Bindable]
			public var feet:Number = 5;
			
			[Bindable]
			public var inches:Number = 10;
			
			[Bindable]
			public var stones:Number = 10;
			
			[Bindable]
			public var pounds:Number = 0;
			
			[Bindable]
			public var lbs:Number = 150;
			
			private function updateBMI():void
			{
			}
			
			
			private function changed():void {
				validate();
			}
			
			public function get systolicBloodPressure():Number
			{
				return Number(systolicBloodPressureInput.text);
			}
			public function set systolicBloodPressure(value:Number):void
			{
				systolicBloodPressureInput.text = value.toPrecision(3);
			}
						
			override protected function updateDisplayList(uw:Number, uh:Number) : void
			{
				super.updateDisplayList(uw, uh);
				height = width * uh/uw;
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="gender" />
		<s:RadioButtonGroup id="model" change="modelChoiceChanged.dispatch()"/>
		
		<!-- These declarations can be moved into the form if they are needed -->
		<s:CheckBox id="moderateAlcohol"  visible="false" label="@Resource(bundle='JBS', key='profile.check.alcohol')"/>
		
		<fx:String id="tipPlaceHolder"/>
		
		<s:SolidColor id="fill" color="0xffffff" alpha="1"/>
		<s:SolidColorStroke id="stroke" weight="2" color="0" alpha="0.4"/>
		<validators:DateOfBirthValidator id="dateValidator"
						  yearSource="{yyyy}" yearProperty="text"
						  monthSource="{mm}" monthProperty="text"
						  daySource="{dd}" dayProperty="text" required="true" />
		<ns:NumberValidator id="totalCholValidator" minValue="{cholesterolFactor}" maxValue="{20*cholesterolFactor}" required="true" source="{totalCholesterolInput}" property="text"/>
		<ns:NumberValidator id="hdlCholValidator" minValue="{0.1*cholesterolFactor}" maxValue="{12*cholesterolFactor}" required="true" source="{hdlCholesterolInput}" property="text"/>
		<ns:NumberValidator id="sbpValidator" minValue="{70}" maxValue="{210}" required="true" source="{systolicBloodPressureInput}" property="text"/>
	</fx:Declarations>
		
<!--	<s:Group width="440" height="450" >
-->
	<s:Group>
		<s:filters>
			<s:DropShadowFilter distance="2" blurX="2" blurY="2" color="0" alpha="0.4"/>
		</s:filters>
		<s:Rect radiusX="5" fill="{fill}" stroke="{stroke}" alpha="1" width="100%" height="100%"/>

		<s:VGroup paddingTop="20" paddingRight="20" paddingBottom="20" paddingLeft="20">
			
			<s:Label text="@Resource(bundle='JBS', key='sideBar1.profile')" fontSize="18"/>
			
			<s:HGroup gap="20" >
				
				<s:VGroup horizontalAlign="left" height="100%">
					
					<s:HGroup width="100%" verticalAlign="middle"  toolTip="{tipPlaceHolder}">
						<s:Label text="@Resource(bundle='JBS', key='profile.entry.dob')" fontWeight="normal" />
						<s:TextInput id="dd" editable="true" text="" width="20" change="changed()" />
						<s:TextInput id="mm" editable="true" text="" width="20" change="changed()" />
						<s:TextInput id="yyyy" editable="true" text="" width="60" change="changed()" />
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom"  toolTip="{tipPlaceHolder}">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.entry.gender')" fontWeight="normal" />
						<s:RadioButton label="@Resource(bundle='JBS', key='male')" groupName="gender" value="male" selected="true" />
						<s:RadioButton label="@Resource(bundle='JBS', key='female')" groupName="gender" value="female" />
					</s:HGroup>
					
					<s:Group height="8"/>
										
				</s:VGroup>
				
				<s:VGroup >
											
					<s:HGroup width="100%" verticalAlign="bottom"  toolTip="{tipPlaceHolder}">
						<s:Group width="100%"/>   
						<s:Label text="@Resource(bundle='JBS', key='profile.entry.totalChol')" fontWeight="normal"/>
						<s:TextInput id="totalCholesterolInput" editable="true" text="" width="40" change="changed()" />
						<ns:ComboBox id="totalCholUnits" width="70" selectedIndex="0" change="changedUnits(event)" labelField="unit" dataProvider="{cholUnitFactors}"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="middle"  toolTip="{tipPlaceHolder}">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.entry.HDLChol')" fontWeight="normal"/>
						<s:TextInput id="hdlCholesterolInput" editable="true" text="" width="40" change="changed()" />
						<ns:ComboBox id="hdlCholUnits" width="70" selectedIndex="0" change="changedUnits(event)" labelField="unit" dataProvider="{cholUnitFactors}"/>
					</s:HGroup>
					
				
					<s:Group height="8"/>
					
					<s:HGroup width="100%" verticalAlign="middle"  toolTip="{tipPlaceHolder}">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.entry.SBP')" fontWeight="normal"/>
						<s:TextInput id="systolicBloodPressureInput" editable="true" text="" width="40" change="changed()" />
						<s:Label text="@Resource(bundle='JBS', key='units.mm_Hg')"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.check.SBPTreatment')" fontWeight="normal"/>
						<s:CheckBox id="SBPTreated"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.check.diabetes')" fontWeight="normal"/>
						<s:CheckBox id="diabetic"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.check.smoker')" fontWeight="normal"/>
						<s:CheckBox id="smoker" change="if(smoker.selected) quitSmoker.selected=false"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.check.quitSmoker')" fontWeight="normal" alpha="{smoker.selected ? 0.5 : 1}"/>
						<s:CheckBox id="quitSmoker" enabled="{!smoker.selected}"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="bottom">
						<s:Group width="100%"/>
						<s:Label text="@Resource(bundle='JBS', key='profile.check.active')" fontWeight="normal"/>
						<s:CheckBox id="active"/>
					</s:HGroup>
													
					
					<s:Group height="8"/>
					
					<s:HGroup id="controlBar" width="100%">
						<s:Button label="@Resource(bundle='JBS', key='Save')" click="profileSaveSignal.dispatch()"/>
						<s:Button label="@Resource(bundle='JBS', key='Load')"  click="profileLoadSignal.dispatch()"/>			
						<s:Group width="100%" />
						<s:Button label="@Resource(bundle='JBS', key='Next')" enabled="{isValid}" id="nextButton" click="profileCommitSignal.dispatch()" />
					</s:HGroup>
					
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:Group>
</s:Group>
