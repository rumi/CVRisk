<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 xmlns:ns="library://ns.adobe.com/flex/mx" 
		 xmlns:view="org.understandinguncertainty.JBS.view.*"
		 horizontalAlign="center"
		 addedToStage="invalidateProperties()"
		>

<!--	addedToStage="addListeners()"
		removedFromStage="removeListeners()"-->
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:SolidColor id="sc1" color="0xCC0000" />
		<s:SolidColor id="sc2" color="0xff6688" />
		<s:SolidColor id="genpop" color="0xAAAAAA" />
		<s:SolidColorStroke id="stroke" color="0" alpha="0.8"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.collections.ArrayCollection;
			
			import org.understandinguncertainty.JBS.model.RunModel;
			import org.understandinguncertainty.JBS.signals.ModelUpdatedSignal;
			import org.understandinguncertainty.JBS.signals.UpdateModelSignal;
			
			[Bindable]
			[Inject]
			public var runModel:RunModel;
			
			[Inject]
			public var updateModelSignal:UpdateModelSignal;
			
			[Bindable]
			public var targetAge:int;
			
			[Bindable]
			public var f:Number;
			
			[Bindable]
			public var f_int:Number;
			
			[Bindable]
			public var f_gp:Number;
			
			[Bindable]
			public var m:Number;
			
			[Bindable]
			public var m_int:Number;
			
/* 			[Bindable]
			public var modelOther:Boolean;
			
			[Bindable]
			public var showOther:Boolean;
			
 */
			public function addListeners():void
			{
				//				trace("outlook setup");
				updateModelSignal.add(update);
			}
			
			public function removeListeners():void
			{
				//				trace("outlook tearDown");
				updateModelSignal.remove(update);
			}
			
			private function update():void
			{
				
				if(runModel) {
					runModel.invalid = true;
					invalidateProperties();
				}
				
			}
			
			/*
			public function addListeners():void
			{
				updateModelSignal.add(update);
			}
			
			public function removeListeners():void
			{
				updateModelSignal.remove(update);
			}
			
			private function update():void
			{
				if(runModel) {
					runModel.invalid = true;
					invalidateProperties();
				}
			}
			*/
			
			private function interventionChange(event:Event):void {
				invalidateProperties();
			}
			
			[Bindable]
			public var dp:ArrayCollection;
			
			override protected function commitProperties() : void
			{
				if(runModel) {
					runModel.invalid = true;
					runModel.commitProperties();
					
					targetAge = runModel.age + runModel.targetInterval;
					var dataProvider:ArrayCollection = runModel.getDeanfield();
					
					if(runModel.targetInterval >= dataProvider.length)
						runModel.targetInterval = dataProvider.length - 1;
					
					var targetItem:Object = dataProvider.getItemAt(runModel.targetInterval);
					
					f = Math.round(targetItem.fdash);
					f_int = Math.round(targetItem.fdash_int);
					f_gp = Math.round(targetItem.f_gp);

//					modelOther = targetItem.modelOther;
//					showOther = targetItem.modelOther;
					
					dp = new ArrayCollection([
						{category:"General\nPopulation", risk:f_gp},
						{category:"Without\nIntervention", risk:f},
						{category:"With\nIntervention", risk: f_int}
					]);
					
					maxPercent = 10*Math.ceil(Math.max(Math.max(f_gp, f_int), f)/10);
				}
			}
			
			private function addPercent(rounded:Number, oldValue:Number, axis:LinearAxis):String
			{
				return rounded.toFixed(0).replace(/\./,"") + "%";
			}

			[Bindable]
			public var maxPercent:Number = 10;
			
			private function dataTipFunction(hitData:HitData):String
			{
				var item:Object = hitData.item;
				var s:String = item.risk.toFixed(0) + "% ";
				s += "chance of Heart Attack or Stroke\nwithin " + runModel.targetInterval 
				s += " years ";
				s += (item.category as String).replace(/\n/," ").toLowerCase();
				return s;
			}

		]]>
	</fx:Script>
	
	<s:VGroup width="500" height="350" gap="8">
		
		<s:Label text="% chance of a Heart Attack or Stroke  within {runModel.targetInterval} years" fontSize="16"/>
		<s:Label text="(before age {runModel.minimumAge + runModel.targetInterval})" fontSize="16"/>
		
		<s:Group width="100%" height="100%" >
			<s:HGroup width="100%" height="100%" horizontalAlign="center">

				<s:VGroup height="100%" verticalAlign="top" left="10" top="0" >
					<s:VSlider id="maxChance" value="{maxPercent}" showDataTip="false" toolTip="Adjust Scale"
							   minimum="{maxPercent}" maximum="100" stepSize="10" />
				</s:VGroup>
				
				<ns:ColumnChart dataProvider="{dp}" width="100%" height="100%" fontSize="12"
							 showDataTips="true" dataTipFunction="dataTipFunction"
							 seriesFilters="[]">
					<ns:verticalAxis>
						<ns:LinearAxis minimum="0" maximum="{100 + maxPercent - maxChance.value}"
									   labelFunction="addPercent"
									   /> 
					</ns:verticalAxis>
				
					<ns:horizontalAxis>
						<ns:CategoryAxis id="cat" categoryField="category" />
					</ns:horizontalAxis>
							
					<ns:series>
						<ns:ColumnSeries 
							xField="category" 
							yField="risk" 
							displayName="Chance of Heart Attack or Stroke in next {runModel.targetInterval} years"
							fills="{[genpop,sc1,sc2]}"
							stroke="{stroke}"
							fontSize="20"
							/>
					</ns:series>		
					
				</ns:ColumnChart>
				
<!--				<s:Label text="{runModel.targetInterval} year chance of a CV event" />
-->
			</s:HGroup>

			
		</s:Group>
		
	</s:VGroup>

	<view:AgeSettings width="60%"/>

</s:VGroup>
